[[_getting_a_repo]]
=== Obtendo um Repositório Git

Você pode obter um projeto Git de duas maneiras principais.
A primeira faz uso de um projeto ou diretório existente e o importa para o Git.
A segunda clona um repositório Git existente a partir de outro servidor.

==== Inicializando um Repositório em um Diretório Existente


Caso você esteja iniciando o monitoramento de um projeto existente com Git, você precisa ir para o diretório do projeto. Se você nunca fez isso, há diferentes formas dependendo de qual sistema você está utilizando:

no Linux:
[source,console]
----
$ cd /home/user/meu_repositorio
----
no Mac:
[source,console]
----
$ cd /Users/user/meu_repositorio
----
no Windows:
[source,console]
----
$ cd /c/user/meu_repositorio
----

e digite:

[source,console]
----
$ git init
----

Isso cria um novo subdiretório chamado `.git` que contem todos os arquivos necessários de seu repositório — um esqueleto do repositório Git. 
Até esse ponto, nada no seu projeto está monitorado.
(Veja <<_git_internals>> para maiores informações sobre quais arquivos estão contidos no diretório `.git` que você acabou de criar.)(((git commands, init)))

Caso você queira começar a controlar o versionamento dos arquivos existentes (diferente de um diretório vazio), você provavelmente deve começar a monitorar esses arquivos e fazer um commit inicial.
Você pode realizar isso com poucos comandos como `git add` que especificam quais arquivos você quer monitorar, seguido de um `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'versao inicial do projeto'
----

Nós iremos estudar o que esses comandos fazem em um momento.
Neste ponto, você tem um repositório Git com arquivos monitorados e um commit inicial.

[[_git_cloning]]
==== Clonando um Repositório Existente

Caso você queira copiar um repositório Git já existente — por exemplo, um projeto que você queira contribuir — o comando necessário é `git clone`.
Caso você esteja familiarizado com outros sistemas VCS, tais como Subversion, você perceberá que o comando é "clone" e não "checkout".
Essa é uma diferença importante — ao invés de baixar um cópia do código funcional, o Git recebe uma cópia de quase todos os dados que o servidor possui.
Cada versão de cada arquivo no histórico do projeto é obtida quando você roda `git clone`.
De fato, se o disco do servidor ficar corrompido, é possível utilizar um dos clones em qualquer cliente para reaver o servidor no estado em que estava quando foi clonado (você pode perder algumas características do servidor, mas todos os dados versionados estarão lá — veja <<_git_on_the_server>> para maiores detalhes).

Você clona um repositório com `git clone [url]`.(((git commands, clone)))
Por exemplo, caso você queria clonar a biblioteca Git do Ruby chamada libgit2, você pode fazê-lo da seguinte forma:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----
Isso cria um diretório chamado ``libgit2'', inicializa um diretório `.git` dentro deste, obtém todos os dados do repositório e verifica a cópia atual da última versão.
Se você entrar no novo diretório `libgit2`, você verá todos os arquivos do projeto, pronto para serem editados ou utilizados.
Caso você queira clonar o repositório em um diretório diferente de ``libgit2'', é possível especificar esse diretório utilizando a opção abaixo:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Este comando faz exatamente a mesma coisa que o anterior, mas o diretório alvo será chamado `mylibgit`.

O Git possui diversos protocolos de transferência que você pode utilizar.
O exemplo anterior utiliza o protocolo `https://`, mas você também pode ver `git://` ou `user@server:/caminho/para/repo.git`, que utilizam o protocolo de transferência SSH.
Em <<_git_on_the_server>> veremos todas as opções disponíveis com as quais o servidor pode ser configurado para acessar o seu repositório Git e os prós e contras de cada uma.
